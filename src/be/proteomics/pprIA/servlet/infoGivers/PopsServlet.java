package be.proteomics.pprIA.servlet.infoGivers;

import be.proteomics.pprIA.general.SequenceCounter;
import be.proteomics.pprIA.search.PerformedSearches;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.*;
import java.util.Vector;

/**
 * Created by IntelliJ IDEA.
 * User: Niklaas Colaert
 * Date: 12-jun-2008
 * Time: 16:41:06
 * To change this template use File | Settings | File Templates.
 */
public class PopsServlet extends HttpServlet {
        /**
     * The save location
     */
    private String iSaveLocation = null;

    public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {

        
        if(iSaveLocation == null){
            loadSaveLocation();
        }
        Vector result = new Vector();

        HttpSession session = req.getSession(true);
        String[] treatments = req.getParameterValues("treatment");
        if (treatments == null) {
            result.add("No treatment was selected");
        } else {

            String ses = req.getParameter("session");
            int sessionid = Integer.valueOf(ses);
            String selected = req.getParameter("popsSelected");
            Integer width = Integer.valueOf(req.getParameter("width"));
            PerformedSearches searches = (PerformedSearches) session.getValue("searches");
            String siteString = searches.getPeptideList(sessionid, treatments, selected);
            if(siteString.length() == 0){
                result.add("No peptides are selected for this treatment");
            } else {
                siteString = siteString.substring(2);
                String[] sites = siteString.split("\n");
                int length = width*2;
                SequenceCounter[] counters = new SequenceCounter[length];
                for(int i = 0; i<counters.length; i ++){
                    SequenceCounter counter = new SequenceCounter();
                    for(int j = 0; j<sites.length; j ++){
                        counter.addSequence(sites[j].charAt(15 - width + i));
                    }
                    counters[i] = counter;
                }
                result.add("#################################");
                result.add("# POPS model generated by PPR");
                String searchParams = "";
                for(int i =0; i<searches.getSearchParameters(sessionid).length; i ++){
                    searchParams = searchParams + " " +searches.getSearchParameters(sessionid)[i];
                }
                result.add("#    search parameters: " + searchParams);
                result.add(" ");
                result.add(" ");
                String subsites = "";
                for(int i = 0; i<width ; i ++){
                    subsites = subsites + "S" + (width - i) + "\t";
                }
                for(int i = 0; i<width ; i ++){
                    subsites = subsites + "S" + (i + 1) + "'\t";
                }
                result.add("Subsites\t\t" + subsites);
                String weights = "";
                for(int i = 0; i<width ; i ++){
                    weights = weights + "1\t";
                }
                for(int i = 0; i<width ; i ++){
                    weights = weights + "1\t";
                }
                result.add("Weights\t\t" + weights);
                String ala = "Ala\t\t";
                for(int i = 0; i<length ; i ++){
                    double score = Math.round((((counters[i].getA() - counters[i].getMinCount())/counters[i].getRange()) - 0.5)*10000)/1000.0;
                    ala = ala  + score + "\t";
                }
                result.add(ala);
                String arg = "Arg\t\t";
                for(int i = 0; i<length ; i ++){
                    double score = Math.round((((counters[i].getR() - counters[i].getMinCount())/counters[i].getRange()) - 0.5)*10000)/1000.0;
                    arg = arg  + score + "\t";
                }
                result.add(arg);
                String asn = "Asn\t\t";
                for(int i = 0; i<length ; i ++){
                    double score = Math.round((((counters[i].getN() - counters[i].getMinCount())/counters[i].getRange()) - 0.5)*10000)/1000.0;
                    asn = asn  + score + "\t";
                }
                result.add(asn);
                String asp = "Asp\t\t";
                for(int i = 0; i<length ; i ++){
                    double score = Math.round((((counters[i].getD() - counters[i].getMinCount())/counters[i].getRange()) - 0.5)*10000)/1000.0;
                    asp = asp  + score + "\t";
                }
                result.add(asp);
                String cys = "Cys\t\t";
                for(int i = 0; i<length ; i ++){
                    double score = Math.round((((counters[i].getC() - counters[i].getMinCount())/counters[i].getRange()) - 0.5)*10000)/1000.0;
                    cys = cys  + score + "\t";
                }
                result.add(cys);
                String gln = "Gln\t\t";
                for(int i = 0; i<length ; i ++){
                    double score = Math.round((((counters[i].getQ() - counters[i].getMinCount())/counters[i].getRange()) - 0.5)*10000)/1000.0;
                    gln = gln  + score + "\t";
                }
                result.add(gln);
                String glu = "Glu\t\t";
                for(int i = 0; i<length ; i ++){
                    double score = Math.round((((counters[i].getE() - counters[i].getMinCount())/counters[i].getRange()) - 0.5)*10000)/1000.0;
                    glu = glu  + score + "\t";
                }
                result.add(glu);
                String gly = "Gly\t\t";
                for(int i = 0; i<length ; i ++){
                    double score = Math.round((((counters[i].getG() - counters[i].getMinCount())/counters[i].getRange()) - 0.5)*10000)/1000.0;
                    gly = gly  + score + "\t";
                }
                result.add(gly);
                String his = "His\t\t";
                for(int i = 0; i<length ; i ++){
                    double score = Math.round((((counters[i].getH() - counters[i].getMinCount())/counters[i].getRange()) - 0.5)*10000)/1000.0;
                    his = his  + score + "\t";
                }
                result.add(his);
                String ile = "Ile\t\t";
                for(int i = 0; i<length ; i ++){
                    double score = Math.round((((counters[i].getI() - counters[i].getMinCount())/counters[i].getRange()) - 0.5)*10000)/1000.0;
                    ile = ile  + score + "\t";
                }
                result.add(ile);
                String leu = "Leu\t\t";
                for(int i = 0; i<length ; i ++){
                    double score = Math.round((((counters[i].getL() - counters[i].getMinCount())/counters[i].getRange()) - 0.5)*10000)/1000.0;
                    leu = leu  + score + "\t";
                }
                result.add(leu);
                String lys = "Lys\t\t";
                for(int i = 0; i<length ; i ++){
                    double score = Math.round((((counters[i].getK() - counters[i].getMinCount())/counters[i].getRange()) - 0.5)*10000)/1000.0;
                    lys = lys  + score + "\t";
                }
                result.add(lys);
                String met = "Met\t\t";
                for(int i = 0; i<length ; i ++){
                    double score = Math.round((((counters[i].getM() - counters[i].getMinCount())/counters[i].getRange()) - 0.5)*10000)/1000.0;
                    met = met  + score + "\t";
                }
                result.add(met);
                String phe = "Phe\t\t";
                for(int i = 0; i<length ; i ++){
                    double score = Math.round((((counters[i].getF() - counters[i].getMinCount())/counters[i].getRange()) - 0.5)*10000)/1000.0;
                    phe = phe  + score + "\t";
                }
                result.add(phe);
                String pro = "Pro\t\t";
                for(int i = 0; i<length ; i ++){
                    double score = Math.round((((counters[i].getP() - counters[i].getMinCount())/counters[i].getRange()) - 0.5)*10000)/1000.0;
                    pro = pro  + score + "\t";
                }
                result.add(pro);
                String ser = "Ser\t\t";
                for(int i = 0; i<length ; i ++){
                    double score = Math.round((((counters[i].getS() - counters[i].getMinCount())/counters[i].getRange()) - 0.5)*10000)/1000.0;
                    ser = ser + score + "\t";
                }
                result.add(ser);
                String thr = "Thr\t\t";
                for(int i = 0; i<length ; i ++){
                    double score = Math.round((((counters[i].getT() - counters[i].getMinCount())/counters[i].getRange()) - 0.5)*10000)/1000.0;
                    thr = thr  + score + "\t";
                }
                result.add(thr);
                String trp = "Trp\t\t";
                for(int i = 0; i<length ; i ++){
                    double score = Math.round((((counters[i].getW() - counters[i].getMinCount())/counters[i].getRange()) - 0.5)*10000)/1000.0;
                    trp = trp  + score + "\t";
                }
                result.add(trp);
                String tyr = "Tyr\t\t";
                for(int i = 0; i<length ; i ++){
                    double score = Math.round((((counters[i].getY() - counters[i].getMinCount())/counters[i].getRange()) - 0.5)*10000)/1000.0;
                    tyr = tyr  + score + "\t";
                }
                result.add(tyr);
                String val = "Val\t\t";
                for(int i = 0; i<length ; i ++){
                    double score = Math.round((((counters[i].getV() - counters[i].getMinCount())/counters[i].getRange()) - 0.5)*10000)/1000.0;
                    val = val + score + "\t";
                }
                result.add(val);
                result.add("Rules");
            }
        }
            //
            String fileLocation = iSaveLocation;
            //The name of the picture will be a time stamp. By this, the filename will always be unique
            String fileName = String.valueOf(System.currentTimeMillis());
            fileLocation = fileLocation + "\\" + fileName;

        //write these things to the search.properties file
            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(fileLocation + ".txt"))));

        for(int i = 0; i<result.size(); i ++){
            bw.write(result.get(i) + "" + (char)10 );
        }

        bw.flush();
        bw.close();
        String lResultString = "";
        result.removeAllElements();
        result.add(lResultString);
        session.putValue("pops", fileName+".txt");

        ServletContext sc = getServletContext();
        RequestDispatcher rd = sc.getRequestDispatcher("/popsFrame.jsp");
        rd.forward(req, res);


    }
    
    
    /**
     * This method will set the save location. This save location is given in the save.properties file that can be found on the server
     */
    public void loadSaveLocation() {
        try {

            InputStream is = this.getClass().getClassLoader().getResourceAsStream("info.properties");
            InputStreamReader reader = new InputStreamReader(is);
            BufferedReader in = new BufferedReader(reader);
            String strLine;
            while ((strLine = in.readLine()) != null) {
                if (strLine.startsWith("location")) {
                    iSaveLocation = strLine.substring(strLine.indexOf("=") + 2);
                }
            }
            iSaveLocation = iSaveLocation + "\\logo";
            //check if this folder exists
            File f =new File(iSaveLocation);
            if(!f.isDirectory()){
                (new File(iSaveLocation)).mkdir();
                System.out.println("Created a new folder : " + iSaveLocation);
            }
        } catch (IOException e) {
            System.err.println("Failing!");
            e.printStackTrace();
        }
    }
}
